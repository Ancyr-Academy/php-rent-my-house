<?php

namespace App\Tests\Suites\Application;

use App\Application\Ports\Repositories\IHouseRepository;
use App\Application\Ports\Repositories\IReservationRepository;
use App\Domain\Entity\EntryStatus;
use App\Domain\Entity\House;
use App\Domain\Entity\User;
use App\Tests\Fixtures\HouseFixture;
use App\Tests\Fixtures\UserFixture;
use App\Tests\Infrastructure\ApplicationTestCase;

class ReserveHouseTest extends ApplicationTestCase {
  public function setUp(): void {
    parent::setUp(); // TODO: Change the autogenerated stub

    $client = self::initialize();

    $user = new UserFixture(
      User::create("user-id", "johndoe@gmail.com", "azerty")
    );

    $house = new HouseFixture(new House("house-id"));

    $this->load([
      $user,
      $house
    ]);

    $user->authenticate($client);
  }

  public function test_happyPath() {
   $this->request('POST', '/api/reserve-house', [
     'houseId' => 'house-id',
     'startDate' => '2022-01-01',
     'endDate' => '2022-01-02',
   ]);

    $this->assertResponseStatusCodeSame(200);

    $response = self::$client->getResponse();
    $data = json_decode($response->getContent(), true);

    $id = $data['id'];

    /** @var IReservationRepository $reservationRepository */
    $reservationRepository = self::getContainer()->get(IReservationRepository::class);
    $reservation = $reservationRepository->findById($id);

    $this->assertNotNull($reservation);

    $this->assertEquals("house-id", $reservation->getHouseId());
    $this->assertEquals("user-id", $reservation->getTenantId());
    $this->assertEquals("2022-01-01", $reservation->getStartDate()->format('Y-m-d'));
    $this->assertEquals("2022-01-02", $reservation->getEndDate()->format('Y-m-d'));

    /** @var IHouseRepository $houseRepository */
    $houseRepository = self::getContainer()->get(IHouseRepository::class);
    $house = $houseRepository->findById('house-id');

    $entry = $house->findEntryById($id);

    $this->assertNotNull($entry);
    $this->assertEquals("2022-01-01", $entry->getStartDate()->format('Y-m-d'));
    $this->assertEquals("2022-01-02", $entry->getEndDate()->format('Y-m-d'));
    $this->assertEquals(EntryStatus::PENDING, $entry->getStatus());
  }

  public function test_houseNotFound() {
    $this->request('POST', '/api/reserve-house', [
      'houseId' => 'not-found-id',
      'startDate' => '2022-01-01',
      'endDate' => '2022-01-02',
    ]);

    $this->assertResponseStatusCodeSame(404);

    $response = self::$client->getResponse();
    $data = json_decode($response->getContent(), true);

    $this->assertEquals("House not found", $data['message']);
  }

  public function test_invalidInput() {
    $this->request('POST', '/api/reserve-house', [
      'houseId' => '',
      'startDate' => '',
      'endDate' => '',
    ]);

    $this->assertResponseStatusCodeSame(400);
  }
}